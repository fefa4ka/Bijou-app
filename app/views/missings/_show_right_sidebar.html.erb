<div class="b-sidebar b-missing__rightside">
				<p class="b-sidebar__header">Объявление</p>
				<p>
					Размещено <%= Russian.strftime @missing.created_at, "%e %B %Y" %> года
				</p>
				<table class="b-missing__author_data">
					<tr>
						<td class="b-missing__author_data_label">
							Автор
						</td>
						<td class="b-missing__author_data_data">
							<%= @author.name %>
						</td>
					</tr>
					<% unless @author.phone == "" %>
					<tr>
						<td class="b-missing__author_data_label">
							Телефон
						</td>
						<td class="b-missing__author_data_data">
							<%= @author.phone %>
						</td>
					</tr>
					<% end %>
				</table>
				<div class="t-center">        
					<% if @author.id == current_user.object_id %>
					<%= tag :input, { :type => "button", :value => "Отредактировать объявление", :class => "b-missing__toggle_send_message" } %>                                                         
					<% else %>
					<%= tag :input, { :type => "button", :value => "Написать личное сообщение", :class => "b-missing__toggle_send_message" } %>                                                                               
					<% end %>
				</div>                              
				
				<hr class="b-hr b-missing__send_message" />
				                                   
				<div class="b-missing__send_message_status t-medium">
				</div>

				<div class="b-missing__send_message">
				<div class="t-medium">Личное сообщение автору</div>
				<%= form_for @message, :url => '/send_message.json', :remote => true do |message| %>
			        <%= message.hidden_field :destination_user_id, :value => @missing.user_id %>
					<%= message.text_area :text, :rows => 4, :class => "b-missing__add_comment", :placeholder => "Текст сообщения" %>  
					<% unless user_signed_in? %> 
					<p class="b-missing__send_message_field">
					<%= message.label :name, "Ваше имя" %><br/>
					<%= message.text_field :name %>  
					</p>                              
					<p class="b-missing__send_message_field">
					<%= message.label :email, "Электронная почта" %><br/>
					<%= message.text_field :email %>       
					</p>
					<p class="b-missing__send_message_field">
					<%= message.label :phone, "Телефон" %><br/>
					<%= message.text_field :phone %>       
					</p> 
					<% end %> 
					<%= message.submit "Отправить", :class=> "b-missing__send_message_button" %>     
					<div class="clear"></div>           

				<% end %>
				</div>
			</div>

		<div class="clear"></div>             	
		
			<div class="b-sidebar b-missing__rightside">
				
				<!-- Тестовое инпут поле -->
				<div class="demo">

				<div class="ui-widget">
					<label>Your preferred programming language: </label>
						<select id="combobox">
							<option value="">Select one...</option>
							<option value="ActionScript">ActionScript</option>
							<option value="AppleScript">AppleScript</option>
							<option value="Asp">Asp</option>
							<option value="BASIC">BASIC</option>
							<option value="C">C</option>
							<option value="C++">C++</option>
							<option value="Clojure">Clojure</option>
							<option value="COBOL">COBOL</option>
							<option value="ColdFusion">ColdFusion</option>
							<option value="Erlang">Erlang</option>
							<option value="Fortran">Fortran</option>
							<option value="Groovy">Groovy</option>
							<option value="Haskell">Haskell</option>
							<option value="Java">Java</option>
							<option value="JavaScript">JavaScript</option>
							<option value="Lisp">Lisp</option>
							<option value="Perl">Perl</option>
							<option value="PHP">PHP</option>
							<option value="Python">Python</option>
							<option value="Ruby">Ruby</option>
							<option value="Scala">Scala</option>
							<option value="Scheme">Scheme</option>
						</select>
					</div>
				<button id="toggle">Show underlying select</button>

				</div>

				<script type="text/javascript">
					(function( $ ) {
		$.widget( "ui.combobox", {
			_create: function() {
				var self = this,
					select = this.element.hide(),
					selected = select.children( ":selected" ),
					value = selected.val() ? selected.text() : "";
				var input = this.input = $( "<input>" )
					.insertAfter( select )
					.val( value )
					.autocomplete({
						delay: 0,
						minLength: 0,
						source: function( request, response ) {
							var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
							response( select.children( "option" ).map(function() {
								var text = $( this ).text();
								if ( this.value && ( !request.term || matcher.test(text) ) )
									return {
										label: text.replace(
											new RegExp(
												"(?![^&;]+;)(?!<[^<>]*)(" +
												$.ui.autocomplete.escapeRegex(request.term) +
												")(?![^<>]*>)(?![^&;]+;)", "gi"
											), "<strong>$1</strong>" ),
										value: text,
										option: this
									};
							}) );
						},
						select: function( event, ui ) {
							ui.item.option.selected = true;
							self._trigger( "selected", event, {
								item: ui.item.option
							});
						},
						change: function( event, ui ) {
							if ( !ui.item ) {
								var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" ),
									valid = false;
								select.children( "option" ).each(function() {
									if ( $( this ).text().match( matcher ) ) {
										this.selected = valid = true;
										return false;
									}
								});
								if ( !valid ) {
									// remove invalid value, as it didn't match anything
									$( this ).val( "" );
									select.val( "" );
									input.data( "autocomplete" ).term = "";
									return false;
								}
							}
						}
					})
					.addClass( "ui-widget ui-widget-content" );

				input.data( "autocomplete" )._renderItem = function( ul, item ) {
					return $( "<li></li>" )
						.data( "item.autocomplete", item )
						.append( "<a>" + item.label + "</a>" )
						.appendTo( ul );
				};

				this.button = $( "<button type='button'>&nbsp;</button>" )
					.attr( "tabIndex", -1 )
					.attr( "title", "Show All Items" )
					.insertAfter( input )
					.button({
						icons: {
							primary: "ui-icon-triangle-1-s"
						},
						text: false
					})
					.removeClass( "ui-corner-all" )
					.addClass( "ui-button-icon ui-dropdown-button-input" )
					.click(function() {
						// close if already visible
						if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
							input.autocomplete( "close" );
							return;
						}

						// work around a bug (likely same cause as #5265)
						$( this ).blur();

						// pass empty string as value to search for, displaying all results
						input.autocomplete( "search", "" );
						input.focus();
					});
			},

			destroy: function() {
				this.input.remove();
				this.button.remove();
				this.element.show();
				$.Widget.prototype.destroy.call( this );
			}
		});
	})( jQuery );

	$(function() {
		$( "#combobox" ).combobox();
		$( "#toggle" ).click(function() {
			$( "#combobox" ).toggle();
		});
	});
				</script>

				<% if @helpers.length > 0 %>
				<div class="b-sidebar__hr_100"></div>
				
				<div class="b-sidebar__header b-missing__people_can_help">Люди которые могут помочь</div>
                
				<div class="b-sidebar__block_list b-list b-missing__people_can_help">
				<% @helpers.each do |can_help| %>
				  <div class="b-list__element">
					<div class="b-list__element_content">
						<a href="<%= user_path(can_help.user) %>" class="b-list__name_link">
						<% if can_help.user.avatar.nil? %>
							<%= image_tag 'no_photo.jpg', :size => "100x100", :class => "b-list__image"  %>
						<% else %>
							<%= image_tag "/users/" + can_help.user.avatar.url(:thumb), :size => "100x100", :class => "b-list__image" %>
						<% end %>
						<%= can_help.user.name %>
						</a>                  
						<%= content_tag :p, "Детектив" if can_help.user.detective? %>
					</div>
					<div class="b-list__element_min"></div>
				  </div>
				<% end %>
				</div>
				<% end %>           
				
				
			</div>